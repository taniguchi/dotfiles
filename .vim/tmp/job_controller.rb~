class Scanner::JobController < ApplicationController

  before_filter :find_job_id, :except => [:create,]
  after_filter :make_response_header

  def create
    # jobIdの生成
    # 今回は時間から生成　例：20130530070423(2013年5月30日7時4分23秒)
    day = Time.now
    generated_id = day.strftime("%Y%m%d%H%M%S")

    # ジョブをDBに登録
    Scan::Job.new do |i|
      i.job_id = generated_id
      i.state = "pending"
      i.save
    end

    error = []
    conflictedCondition = []
    res = {
      "jobId" => generated_id,
      "result" => "ok",
      "errors" => error,
      "conflictedCondition" => conflictedCondition
    }

    render :json => res, :status => 202
    logger.debug(res.inspect)
  end

  def show
    modify_job_state()

    error = []
    scanInfo = {
      "scanState" => @job.scan_state,
      "scanStateReason" => @job.scan_state_reason,
      "scannedPages" => 50,
      "omittedBlankPages" => 1
    }
    sendInfo = {
      "sendState" => @job.send_state,
      "sendStateReason" => @job.send_state_reason
    }
    ocrInfo = {
      "ocrState" => @job.ocr_state,
      "ocrStateReason" => @job.ocr_state_reason
    }
    getScannedImageInfo = {
      "getScannedImageState" => @job.get_scanned_image_state,
      "getScannedImageStateReason" => @job.get_scanned_image_state_reason 
    }
    jobInfo = {
      "state" => @job.state,
      "stateReason" => @job.state_reason,
      "scanState" => scanInfo,
      "sendState" => sendInfo,
      "ocrInfo" => ocrInfo,
      "getScannedImageInfo" => getScannedImageInfo
    } 

    res = {
      "jobId" => @job.job_id,
      "result" => "ok",
      "errors" => error,
      "jobState" => jobInfo
    }

    render :json => res
    logger.debug(res.inspect)
  end

  def update
    modify_job_state()
    
    # ジョブ中止のリクエストがきた場合
    #   状態がpendingもしくはprocessingの場合、中止が成功
    #   それ以外の場合はエラーを返す
    #   エラーメッセージはT.B.D.
    res = {
      "jobId" => @job.job_id
    } 

    if params[:jobState] == "canceled"
      if @job.state == "pending" || @job.state == "processing"
        @job.state = "canceled"
        @job.save
        res["result"] = "ok"
      else
        res["result"] = "ng"
      end
    end

    render :json => res
    logger.debug(res.inspect)
  end

  def destroy
    # 状態をdeletedに更新
    @job.state = "deleted"
    @job.save

    errors[0] = []

    res = {
      "jobId" => @job.job_id,
      "result" => "ok",
      "errors" => errors
    }

    render :json => res
    logger.debug(res.inspect)
  end

  def file
    if params[:target] == "data" || !params[:target] then
      send_file("public/sample.pdf", :type => 'application/pdf', :disposition => 'inline')
      #send_file("public/sample.tif", :type => 'image/tiff', :disposition => 'inline')
      #send_file("public/sample.jpg",:type => 'image/jpg', :disposition => 'inline')
    else
      render :json => {"result" => "ng"}, :status => 404
    end
  end

  def find_job_id
    @job = Scan::Job.find(:first, :conditions => ["job_id = ?", params[:id]])
    unless @job then
      render :json => {"result" => "ng"}, :status => 404
    end
  end

  def modify_job_state
    # 時間の経過で状態を更新
    # 10秒以上経過 => processing
    # 20秒以上経過 => completed
    if @job.state == "pending" || @job.state == "processing"
      if @job.created_at + 10.seconds <= DateTime.now
        if (@job.created_at + 20.seconds <= DateTime.now)
          @job.state = "completed"
          @job.save
        else
          @job.state = "processing"
          @job.save
        end
      end
    end
  end

  def make_response_header
    # クロスサイトHTTPリクエストに対応
    response.headers["Access-Control-Allow-Origin"] = "*"
    response.headers["Access-Control-Allow-Methods"] = "GET,POST,PUT"
    response.headers["Access-Control-Allow-Headers"] = "X-PINGOTHER"
    response.headers["Access-Control-Max-Age"] = "1728000"
  end

end
